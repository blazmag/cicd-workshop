# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  snyk: snyk/snyk@1.1.2
  node: circleci/node@5.0.0
  docker: circleci/docker@2.0.2
  heroku: circleci/heroku@1.2.6
  discord: antonioned/discord@0.1.0


parameters:
  scheduled:
    type: boolean
    default: false
  skip-run:
    type: boolean
    default: false

jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
  build-and-test:
      parameters:
        node_version:
          type: string
          default: 16.14.0
      parallelism: 4
      docker:
        - image: cimg/node:<< parameters.node_version >>
      steps:
        - checkout
        - restore_cache:
            key: v1-deps-{{ checksum "package-lock.json" }}
        - run:
            name: Install deps
            command: npm install
        - save_cache:
            key: v1-deps-{{ checksum "package-lock.json" }}
            paths: 
                - node_modules
        - run:
            name: Run tests
            command: |
              echo $(circleci tests glob "test/**/*.test.js")
              circleci tests glob "test/**/*.test.js" | circleci tests split |
              xargs npm run test-ci
        - run:
              name: Copy tests results for storing
              command: |
                mkdir ~/test-results
                cp test-results.xml ~/test-results/
              when: always
        - run:
              name: Process test report
              when: always
              command: |
                  # Convert absolute paths to relative to support splitting tests by timing
                  if [ -e ~/test-results.xml ]; then
                    sed -i "s|`pwd`/||g" ~/test-results.xml
                  fi
        - store_test_results:
            path: test-results
        - store_artifacts:
            path: test-results
        # - discord/status:
        #     success_message: 'test'
        #     success_only: true  
  dependency-vulnerability-scan:
    docker:
      - image: cimg/node:16.14.0
    steps:
      - checkout
      - node/install-packages
      - snyk/scan:
          fail-on-issues: true
  build-docker:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker
      - docker/check
      - docker/build:
          image: $DOCKER_LOGIN/${CIRCLE_PROJECT_REPONAME}-1-march-22
          tag: 0.1.<< pipeline.number >>
      - docker/push:
          image: $DOCKER_LOGIN/${CIRCLE_PROJECT_REPONAME}-1-march-22
          tag: 0.1.<< pipeline.number >>
  deploy-to-heroku:
    docker: 
      - image: cimg/base:stable
    steps:
      - heroku/install
      - heroku/check-authentication
      - checkout
      - setup_remote_docker
      - heroku/push-docker-image:
          app-name:  blaz-cicd-workshop 
          process-types: web
      - heroku/release-docker-image:
          app-name:  blaz-cicd-workshop 
          process-types: web
workflows:
  say-hello-workflow:
    when:
      not: << pipeline.parameters.skip-run >>
      not: << pipeline.parameters.scheduled >>
    jobs:
      - build-and-test:
          matrix:
            parameters:
              node_version: ["16.14.0", "14.19.0", "17.6.0" ]
      - dependency-vulnerability-scan
      - build-docker:
          requires:
            - build-and-test
            - dependency-vulnerability-scan
          filters:
            branches:
              only: main
      - hold-for-approval:
          type: approval
          requires: 
            - build-docker
      - deploy-to-heroku:
          requires:
            - build-docker
            - hold-for-approval
  nightly_build:
    when: << pipeline.parameters.scheduled >>
    jobs:
      - build-and-test:
          matrix:
            parameters:
              node_version: ["16.14.0", "14.19.0", "17.6.0" ]
      - dependency-vulnerability-scan